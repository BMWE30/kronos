// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kronos/pb/drift_service.proto

/*
Package kronospb is a generated protocol buffer package.

It is generated from these files:
	kronos/pb/drift_service.proto
	kronos/pb/kronos.proto

It has these top-level messages:
	DriftTimeConfig
	DriftTimeResponse
	NodeAddr
	OracleState
	OracleProposal
	Node
	Cluster
	OracleTimeRequest
	OracleTimeResponse
	KronosTimeRequest
	KronosTimeResponse
	StatusRequest
	StatusResponse
*/
package kronospb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DriftTimeConfig struct {
	// DriftFactor controls the rate of flow of drifting clock. eg. DriftFactor
	// of 1.1 means 1 second duration of system time will translate to 1.1
	// second with drifting clock.
	DriftFactor float64 `protobuf:"fixed64,1,opt,name=DriftFactor,proto3" json:"DriftFactor,omitempty"`
	// Offset is used to jump the clock by offset nanoseconds
	Offset int64 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (m *DriftTimeConfig) Reset()                    { *m = DriftTimeConfig{} }
func (m *DriftTimeConfig) String() string            { return proto.CompactTextString(m) }
func (*DriftTimeConfig) ProtoMessage()               {}
func (*DriftTimeConfig) Descriptor() ([]byte, []int) { return fileDescriptorDriftService, []int{0} }

type DriftTimeResponse struct {
}

func (m *DriftTimeResponse) Reset()                    { *m = DriftTimeResponse{} }
func (m *DriftTimeResponse) String() string            { return proto.CompactTextString(m) }
func (*DriftTimeResponse) ProtoMessage()               {}
func (*DriftTimeResponse) Descriptor() ([]byte, []int) { return fileDescriptorDriftService, []int{1} }

func init() {
	proto.RegisterType((*DriftTimeConfig)(nil), "kronos.DriftTimeConfig")
	proto.RegisterType((*DriftTimeResponse)(nil), "kronos.DriftTimeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UpdateDriftTimeService service

type UpdateDriftTimeServiceClient interface {
	UpdateDriftConfig(ctx context.Context, in *DriftTimeConfig, opts ...grpc.CallOption) (*DriftTimeResponse, error)
}

type updateDriftTimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpdateDriftTimeServiceClient(cc *grpc.ClientConn) UpdateDriftTimeServiceClient {
	return &updateDriftTimeServiceClient{cc}
}

func (c *updateDriftTimeServiceClient) UpdateDriftConfig(ctx context.Context, in *DriftTimeConfig, opts ...grpc.CallOption) (*DriftTimeResponse, error) {
	out := new(DriftTimeResponse)
	err := grpc.Invoke(ctx, "/kronos.UpdateDriftTimeService/UpdateDriftConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateDriftTimeService service

type UpdateDriftTimeServiceServer interface {
	UpdateDriftConfig(context.Context, *DriftTimeConfig) (*DriftTimeResponse, error)
}

func RegisterUpdateDriftTimeServiceServer(s *grpc.Server, srv UpdateDriftTimeServiceServer) {
	s.RegisterService(&_UpdateDriftTimeService_serviceDesc, srv)
}

func _UpdateDriftTimeService_UpdateDriftConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriftTimeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDriftTimeServiceServer).UpdateDriftConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kronos.UpdateDriftTimeService/UpdateDriftConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDriftTimeServiceServer).UpdateDriftConfig(ctx, req.(*DriftTimeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateDriftTimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kronos.UpdateDriftTimeService",
	HandlerType: (*UpdateDriftTimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDriftConfig",
			Handler:    _UpdateDriftTimeService_UpdateDriftConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kronos/pb/drift_service.proto",
}

func (m *DriftTimeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriftTimeConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DriftFactor != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DriftFactor))))
		i += 8
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDriftService(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *DriftTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriftTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintDriftService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DriftTimeConfig) Size() (n int) {
	var l int
	_ = l
	if m.DriftFactor != 0 {
		n += 9
	}
	if m.Offset != 0 {
		n += 1 + sovDriftService(uint64(m.Offset))
	}
	return n
}

func (m *DriftTimeResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovDriftService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDriftService(x uint64) (n int) {
	return sovDriftService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DriftTimeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriftService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriftTimeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriftTimeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriftFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DriftFactor = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriftService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDriftService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriftService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriftTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriftService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriftTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriftTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDriftService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriftService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDriftService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDriftService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDriftService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDriftService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDriftService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDriftService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDriftService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDriftService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDriftService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kronos/pb/drift_service.proto", fileDescriptorDriftService) }

var fileDescriptorDriftService = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0x2e, 0xca, 0xcf,
	0xcb, 0x2f, 0xd6, 0x2f, 0x48, 0xd2, 0x4f, 0x29, 0xca, 0x4c, 0x2b, 0x89, 0x2f, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0x48, 0x2b, 0x79, 0x73,
	0xf1, 0xbb, 0x80, 0xa4, 0x43, 0x32, 0x73, 0x53, 0x9d, 0xf3, 0xf3, 0xd2, 0x32, 0xd3, 0x85, 0x14,
	0xb8, 0xb8, 0xc1, 0x42, 0x6e, 0x89, 0xc9, 0x25, 0xf9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x8c,
	0x41, 0xc8, 0x42, 0x42, 0x62, 0x5c, 0x6c, 0xfe, 0x69, 0x69, 0xc5, 0xa9, 0x25, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0xcc, 0x41, 0x50, 0x9e, 0x92, 0x30, 0x97, 0x20, 0xdc, 0xb0, 0xa0, 0xd4, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x64, 0x2e, 0xb1, 0xd0, 0x82, 0x94, 0xc4, 0x92, 0x54, 0xb8, 0x54,
	0x30, 0xc4, 0x25, 0x42, 0x9e, 0x5c, 0x82, 0x48, 0x32, 0x50, 0xdb, 0xc5, 0xf5, 0x20, 0x2e, 0xd3,
	0x43, 0x73, 0x96, 0x94, 0x24, 0x86, 0x04, 0xcc, 0x0a, 0x25, 0x06, 0x27, 0xa5, 0x13, 0x0f, 0xe5,
	0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc6, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0x80, 0xe8, 0x2a, 0x48, 0x4a, 0x62, 0x03, 0xfb,
	0xdc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x48, 0x6c, 0xf5, 0x40, 0x1a, 0x01, 0x00, 0x00,
}
